Index: account/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.user.dto.response;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.experimental.SuperBuilder;\r\n\r\nimport java.util.List;\r\n@Data\r\n@SuperBuilder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class UserInfoResponseDto {\r\n    private Long id;\r\n    protected String name;\r\n    protected String email;\r\n    private String phone;\r\n    private String secondPassword;\r\n    private String accountKey;\r\n    private Double totalScore;\r\n    private Integer reportedCount;\r\n    protected List<String> roles;\r\n}\r\n
===================================================================
diff --git a/account/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java b/account/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java
--- a/account/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java	
+++ b/account/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java	
@@ -17,6 +17,7 @@
     private String phone;
     private String secondPassword;
     private String accountKey;
+    private String mainAccount;
     private Double totalScore;
     private Integer reportedCount;
     protected List<String> roles;
Index: board/src/main/java/com/ssafy/stackup/domain/recommend/entity/Recommend.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.recommend.entity;\r\n\r\nimport com.ssafy.stackup.domain.board.entity.BoardFramework;\r\nimport com.ssafy.stackup.domain.board.entity.BoardLanguage;\r\nimport com.ssafy.stackup.domain.board.entity.Level;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport org.springframework.data.elasticsearch.annotations.Document;\r\nimport org.springframework.data.elasticsearch.annotations.Field;\r\nimport org.springframework.data.elasticsearch.annotations.FieldType;\r\n\r\nimport java.util.List;\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Document(indexName = \"recommend\")\r\n@EqualsAndHashCode(onlyExplicitlyIncluded = true) // 명시적으로 포함한 필드만 사용\r\npublic class Recommend {\r\n    @Id\r\n    @Field(type = FieldType.Keyword)\r\n    @org.springframework.data.annotation.Id\r\n    @Column(name = \"recommend_id\")\r\n    private String recommendId;\r\n\r\n    private String title;\r\n\r\n    private Long deposit;\r\n\r\n    @Field(type = FieldType.Keyword)\r\n    private String classification;\r\n\r\n    @Field(type = FieldType.Nested, includeInParent = true)\r\n    private List<BoardFramework> frameworks;\r\n\r\n    @Field(type = FieldType.Nested, includeInParent = true)\r\n    private List<BoardLanguage> languages;\r\n//    @Field(type = FieldType.Nested, includeInParent = true)\r\n//    private List<String> languages;\r\n\r\n    @Field(type = FieldType.Keyword)\r\n    private Level level;\r\n\r\n    @EqualsAndHashCode.Include // boardId만으로 equals와 hashCode 계산\r\n    private Long boardId;\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/recommend/entity/Recommend.java b/board/src/main/java/com/ssafy/stackup/domain/recommend/entity/Recommend.java
--- a/board/src/main/java/com/ssafy/stackup/domain/recommend/entity/Recommend.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/recommend/entity/Recommend.java	
@@ -36,8 +36,6 @@
 
     @Field(type = FieldType.Nested, includeInParent = true)
     private List<BoardLanguage> languages;
-//    @Field(type = FieldType.Nested, includeInParent = true)
-//    private List<String> languages;
 
     @Field(type = FieldType.Keyword)
     private Level level;
Index: board/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.common.config;\r\n\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.client.ClientConfiguration;\r\nimport org.springframework.data.elasticsearch.client.elc.ElasticsearchConfiguration;\r\nimport org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;\r\n\r\n@Configuration\r\n@EnableElasticsearchRepositories(basePackages = \"com.ssafy.stackup.domain.recommend.repository\")\r\npublic class ElasticSearchConfig extends ElasticsearchConfiguration {\r\n    @Override\r\n    public ClientConfiguration clientConfiguration() {\r\n        return ClientConfiguration.builder()\r\n                .connectedTo(\"localhost:9200\")\r\n                .build();\r\n    }\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java b/board/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java
--- a/board/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java	
+++ b/board/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java	
@@ -11,7 +11,7 @@
     @Override
     public ClientConfiguration clientConfiguration() {
         return ClientConfiguration.builder()
-                .connectedTo("localhost:9200")
+                .connectedTo("34.47.84.173:9200")
                 .build();
     }
 }
Index: board/src/main/java/com/ssafy/stackup/domain/recommend/service/RecommendationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.recommend.service;\r\n\r\nimport com.ssafy.stackup.domain.board.entity.Board;\r\nimport com.ssafy.stackup.domain.board.entity.Level;\r\nimport com.ssafy.stackup.domain.board.repository.BoardRepository;\r\nimport com.ssafy.stackup.domain.recommend.entity.Recommend;\r\nimport com.ssafy.stackup.domain.recommend.repository.BoardElasticsearchRepository;\r\nimport com.ssafy.stackup.domain.user.entity.Freelancer;\r\nimport com.ssafy.stackup.domain.user.repository.FreelancerRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchOperations;\r\nimport org.springframework.data.elasticsearch.core.IndexOperations;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.StreamSupport;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class RecommendationService {\r\n\r\n    @Autowired\r\n    private final FreelancerRepository freelancerRepository;\r\n    @Autowired\r\n    private final BoardElasticsearchRepository boardElasticsearchRepo;\r\n    @Autowired\r\n    private final BoardRepository boardRepository;\r\n\r\n    public List<Recommend> findRecommend () {\r\n        // Elasticsearch에 있는 모든 Board를 가져와 출력\r\n        return StreamSupport.stream(boardElasticsearchRepo.findAll().spliterator(), false)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public Recommend findById (String id) {\r\n        return boardElasticsearchRepo.findById(id).orElse(null);\r\n    }\r\n\r\n    public Set<Recommend> recommendBoardsForFreelancer(Long freelancerId) {\r\n        // 1. 프리랜서 정보 가져오기\r\n        Freelancer freelancer = freelancerRepository.findById(freelancerId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"프리랜서를 찾을 수 없습니다.\"));\r\n        System.out.println(freelancer.getClassification());\r\n\r\n        List<Recommend> recommendListByClassification = boardElasticsearchRepo.findByClassification(freelancer.getClassification()).stream().toList();\r\n\r\n//         2. 프리랜서가 사용하는 언어에 맞는 보드 추천\r\n        Set<String> languages = freelancer.getLanguages().stream()\r\n                .map(language -> language.getLanguage().getName())\r\n                .collect(Collectors.toSet());\r\n        System.out.println(languages);\r\n        // 각 언어별로 추천 검색\r\n        Set<Recommend> recommendedBoardsByLanguage = new HashSet<>();\r\n        for (String language : languages) {\r\n            List<Recommend> recommendsByLanguage = boardElasticsearchRepo.findByLanguages(language);\r\n            System.out.println(recommendsByLanguage.size()+ \"언어\" + language);\r\n            recommendedBoardsByLanguage.addAll(recommendsByLanguage);\r\n        }\r\n\r\n//        // 3. 프리랜서가 사용하는 프레임워크에 맞는 보드 추천\r\n        Set<String> frameworks = freelancer.getFrameworks().stream()\r\n                .map(framework -> framework.getFramework().getName())\r\n                .collect(Collectors.toSet());\r\n        // 각 프레임워크별로 추천 검색\r\n        Set<Recommend> recommendedBoardsByFramework = new HashSet<>();\r\n        for (String framework : frameworks) {\r\n            List<Recommend> recommendsByFramework = boardElasticsearchRepo.findByFrameworks(framework);\r\n            System.out.println(recommendsByFramework.size()+\"프레임워크\"+framework);\r\n            recommendedBoardsByFramework.addAll(recommendsByFramework);\r\n        }\r\n//\r\n        // 4. 프리랜서의 경력 연수에 맞는 레벨을 계산하여 보드 추천\r\n        Integer careerYear = freelancer.getCareerYear();\r\n        Level freelancerLevel = getLevelByCareerYear(careerYear);\r\n        System.out.println(freelancerLevel);\r\n\r\n        // 프리랜서 경력에 맞는 보드 추천\r\n        List<Recommend> recommendedBoardsByLevel = boardElasticsearchRepo.findByLevel(freelancerLevel);\r\n\r\n\r\n        // 추천된 모든 보드들을 하나의 리스트로 합침\r\n        Set<Recommend> recommendedBoards = new HashSet<>();\r\n        recommendedBoards.addAll(recommendListByClassification);\r\n        recommendedBoards.addAll(recommendedBoardsByFramework);\r\n        recommendedBoards.addAll(recommendedBoardsByLevel);\r\n        recommendedBoards.addAll(recommendedBoardsByLanguage);\r\n\r\n        List<Board> boards = new ArrayList<>();\r\n\r\n        Set<Long> boardIds = recommendedBoards.stream()\r\n                .map(Recommend::getBoardId) // Recommend 객체에서 boardId를 추출\r\n                .collect(Collectors.toSet());\r\n        System.out.println(boardIds);\r\n\r\n        // 5. 각 Recommend가 몇 개의 조건을 만족하는지 확인하고, 3개 이상 맞는 보드만 필터링\r\n        Set<Recommend> result = recommendedBoards.stream()\r\n                .filter(recommend -> {\r\n                    int matchCount = 0;\r\n\r\n                    // classification 일치 여부 확인\r\n                    if (recommend.getClassification().equals(freelancer.getClassification())) {\r\n                        matchCount++;\r\n                    }\r\n\r\n                    // language 일치 여부 확인\r\n//                    if (recommend.getLanguages().stream().anyMatch(languages::contains)) {\r\n//                        matchCount++;\r\n//                    }\r\n                    if (!recommend.getLanguages().isEmpty() && recommend.getLanguages().stream()\r\n                            .map(language -> language.getLanguage().getName())\r\n                            .anyMatch(languages::contains)) {\r\n                        matchCount++;\r\n                    }\r\n\r\n                    // framework 일치 여부 확인\r\n                    if (!recommend.getFrameworks().isEmpty() && recommend.getFrameworks().stream()\r\n                            .map(framework -> framework.getFramework().getName())\r\n                            .anyMatch(frameworks::contains)) {\r\n                        matchCount++;\r\n                    }\r\n//                    if (recommend.getFrameworks().stream().anyMatch(frameworks::contains)) {\r\n//                        matchCount++;\r\n//                    }\r\n\r\n                    // level 일치 여부 확인\r\n                    if (recommend.getLevel() == freelancerLevel) {\r\n                        matchCount++;\r\n                    }\r\n                    System.out.println(matchCount);\r\n                    // 3개 이상의 조건이 일치하는 경우만 포함\r\n                    return matchCount >= 3;\r\n                })\r\n                .collect(Collectors.toSet());\r\n\r\n        return result;\r\n    }\r\n\r\n    private Level getLevelByCareerYear(int careerYear) {\r\n        for (Level level : Level.values()) {\r\n            if (level.matches(careerYear)) {\r\n                return level;\r\n            }\r\n        }\r\n        throw new IllegalArgumentException(\"적절한 레벨을 찾을 수 없습니다.\");\r\n    }\r\n\r\n    public Set<Recommend> recommends(Long freelancerId) {\r\n        Freelancer freelancer = freelancerRepository.findById(freelancerId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"프리랜서를 찾을 수 없습니다.\"));\r\n\r\n        Set<String> languages = freelancer.getLanguages().stream()\r\n                .map(language -> language.getLanguage().getName())\r\n                .collect(Collectors.toSet());\r\n\r\n//        // 3. 프리랜서가 사용하는 프레임워크에 맞는 보드 추천\r\n        Set<String> frameworks = freelancer.getFrameworks().stream()\r\n                .map(framework -> framework.getFramework().getName())\r\n                .collect(Collectors.toSet());\r\n\r\n        Integer careerYear = freelancer.getCareerYear();\r\n        Level freelancerLevel = getLevelByCareerYear(careerYear);\r\n\r\n        List<Recommend> recommendList = boardElasticsearchRepo.findByMultipleCriteria(freelancer.getClassification(),languages,frameworks,freelancerLevel);\r\n        Set<Recommend> results = new HashSet<>(recommendList);\r\n\r\n        return results;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//    @Qualifier(\"freelancerElasticsearchRepo\")\r\n//    private final FreelancerElasticsearchRepository freelancerRepository;\r\n//    private final BoardElasticsearchRepository boardRepository;\r\n//\r\n//    public List<Board> recommendBoardsForFreelancer(Long freelancerId) {\r\n//        Freelancer freelancer = freelancerRepository.findById(freelancerId).orElse(null);\r\n//        if (freelancer == null) {\r\n//            return List.of(); // 프리랜서가 없으면 빈 리스트 반환\r\n//        }\r\n//\r\n//        // 프리랜서 속성 가져오기\r\n//        String classification = freelancer.getClassification();\r\n//        Set<String> languages = freelancer.getLanguages().stream()\r\n//                .map(lang -> lang.getLanguage().getName())\r\n//                .collect(Collectors.toSet());\r\n//        Set<String> frameworks = freelancer.getFrameworks().stream()\r\n//                .map(framework -> framework.getFramework().getName())\r\n//                .collect(Collectors.toSet());\r\n//        Integer careerYear = freelancer.getCareerYear();\r\n////        Level level = freelancer.getLevel(); // 프리랜서의 레벨 추가\r\n//\r\n////        return boardRepository.findAll().stream()\r\n////                .filter(board -> matchesBoardCriteria(board, classification, languages, frameworks, careerYear))\r\n////                .collect(Collectors.toList());\r\n//        // findAll() 호출 후 Iterable을 Stream으로 변환\r\n//        return StreamSupport.stream(boardRepository.findAll().spliterator(), false)\r\n//                .filter(board -> matchesBoardCriteria(board, classification, languages, frameworks, careerYear))\r\n//                .collect(Collectors.toList());\r\n//    }\r\n//\r\n//    private boolean matchesBoardCriteria(Board board, String classification, Set<String> languages, Set<String> frameworks, Integer careerYear) {\r\n//        int matchCount = 0; // 일치하는 조건 수 카운트\r\n//\r\n//        // 분류가 일치하는지 확인\r\n//        if (classification != null && classification.equals(board.getClassification())) {\r\n//            matchCount++;\r\n//        }\r\n//\r\n//        // 요구 스킬셋 확인\r\n//        boolean languagesMatch = languages.stream().anyMatch(lang -> board.getBoardLanguages().stream()\r\n//                .map(boardLanguage -> boardLanguage.getLanguage().getName())\r\n//                .collect(Collectors.toSet())\r\n//                .contains(lang));\r\n//\r\n//        boolean frameworksMatch = frameworks.stream().anyMatch(framework -> board.getBoardFrameworks().stream()\r\n//                .map(boardFramework -> boardFramework.getFramework().getName())\r\n//                .collect(Collectors.toSet())\r\n//                .contains(framework));\r\n//\r\n//        if (languagesMatch) {\r\n//            matchCount++;\r\n//        }\r\n//        if (frameworksMatch) {\r\n//            matchCount++;\r\n//        }\r\n//\r\n//        Level level = board.getLevel();\r\n//\r\n//        // 레벨에 따른 요구 경력 확인\r\n//        if (level != null && isCareerYearMatching(careerYear, level)) {\r\n//            matchCount++;\r\n//        }\r\n//\r\n//        // 3개 이상의 조건이 일치하는지 확인\r\n//        return matchCount >= 3;\r\n//    }\r\n//\r\n//    // 레벨과 경력 연수를 비교하는 메서드\r\n//    private boolean isCareerYearMatching(Integer careerYear, Level level) {\r\n//        switch (level) {\r\n//            case JUNIOR:\r\n//                return careerYear < 3; // 3년 미만\r\n//            case MID:\r\n//                return careerYear >= 3 && careerYear < 7; // 3년 이상 7년 미만\r\n//            case SENIOR:\r\n//                return careerYear >= 7; // 7년 이상\r\n//            default:\r\n//                return false;\r\n//        }\r\n//    }\r\n\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/recommend/service/RecommendationService.java b/board/src/main/java/com/ssafy/stackup/domain/recommend/service/RecommendationService.java
--- a/board/src/main/java/com/ssafy/stackup/domain/recommend/service/RecommendationService.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/recommend/service/RecommendationService.java	
@@ -87,13 +87,6 @@
         recommendedBoards.addAll(recommendedBoardsByLevel);
         recommendedBoards.addAll(recommendedBoardsByLanguage);
 
-        List<Board> boards = new ArrayList<>();
-
-        Set<Long> boardIds = recommendedBoards.stream()
-                .map(Recommend::getBoardId) // Recommend 객체에서 boardId를 추출
-                .collect(Collectors.toSet());
-        System.out.println(boardIds);
-
         // 5. 각 Recommend가 몇 개의 조건을 만족하는지 확인하고, 3개 이상 맞는 보드만 필터링
         Set<Recommend> result = recommendedBoards.stream()
                 .filter(recommend -> {
@@ -104,10 +97,6 @@
                         matchCount++;
                     }
 
-                    // language 일치 여부 확인
-//                    if (recommend.getLanguages().stream().anyMatch(languages::contains)) {
-//                        matchCount++;
-//                    }
                     if (!recommend.getLanguages().isEmpty() && recommend.getLanguages().stream()
                             .map(language -> language.getLanguage().getName())
                             .anyMatch(languages::contains)) {
@@ -120,15 +109,11 @@
                             .anyMatch(frameworks::contains)) {
                         matchCount++;
                     }
-//                    if (recommend.getFrameworks().stream().anyMatch(frameworks::contains)) {
-//                        matchCount++;
-//                    }
 
                     // level 일치 여부 확인
                     if (recommend.getLevel() == freelancerLevel) {
                         matchCount++;
                     }
-                    System.out.println(matchCount);
                     // 3개 이상의 조건이 일치하는 경우만 포함
                     return matchCount >= 3;
                 })
@@ -169,101 +154,4 @@
     }
 
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-//    @Qualifier("freelancerElasticsearchRepo")
-//    private final FreelancerElasticsearchRepository freelancerRepository;
-//    private final BoardElasticsearchRepository boardRepository;
-//
-//    public List<Board> recommendBoardsForFreelancer(Long freelancerId) {
-//        Freelancer freelancer = freelancerRepository.findById(freelancerId).orElse(null);
-//        if (freelancer == null) {
-//            return List.of(); // 프리랜서가 없으면 빈 리스트 반환
-//        }
-//
-//        // 프리랜서 속성 가져오기
-//        String classification = freelancer.getClassification();
-//        Set<String> languages = freelancer.getLanguages().stream()
-//                .map(lang -> lang.getLanguage().getName())
-//                .collect(Collectors.toSet());
-//        Set<String> frameworks = freelancer.getFrameworks().stream()
-//                .map(framework -> framework.getFramework().getName())
-//                .collect(Collectors.toSet());
-//        Integer careerYear = freelancer.getCareerYear();
-////        Level level = freelancer.getLevel(); // 프리랜서의 레벨 추가
-//
-////        return boardRepository.findAll().stream()
-////                .filter(board -> matchesBoardCriteria(board, classification, languages, frameworks, careerYear))
-////                .collect(Collectors.toList());
-//        // findAll() 호출 후 Iterable을 Stream으로 변환
-//        return StreamSupport.stream(boardRepository.findAll().spliterator(), false)
-//                .filter(board -> matchesBoardCriteria(board, classification, languages, frameworks, careerYear))
-//                .collect(Collectors.toList());
-//    }
-//
-//    private boolean matchesBoardCriteria(Board board, String classification, Set<String> languages, Set<String> frameworks, Integer careerYear) {
-//        int matchCount = 0; // 일치하는 조건 수 카운트
-//
-//        // 분류가 일치하는지 확인
-//        if (classification != null && classification.equals(board.getClassification())) {
-//            matchCount++;
-//        }
-//
-//        // 요구 스킬셋 확인
-//        boolean languagesMatch = languages.stream().anyMatch(lang -> board.getBoardLanguages().stream()
-//                .map(boardLanguage -> boardLanguage.getLanguage().getName())
-//                .collect(Collectors.toSet())
-//                .contains(lang));
-//
-//        boolean frameworksMatch = frameworks.stream().anyMatch(framework -> board.getBoardFrameworks().stream()
-//                .map(boardFramework -> boardFramework.getFramework().getName())
-//                .collect(Collectors.toSet())
-//                .contains(framework));
-//
-//        if (languagesMatch) {
-//            matchCount++;
-//        }
-//        if (frameworksMatch) {
-//            matchCount++;
-//        }
-//
-//        Level level = board.getLevel();
-//
-//        // 레벨에 따른 요구 경력 확인
-//        if (level != null && isCareerYearMatching(careerYear, level)) {
-//            matchCount++;
-//        }
-//
-//        // 3개 이상의 조건이 일치하는지 확인
-//        return matchCount >= 3;
-//    }
-//
-//    // 레벨과 경력 연수를 비교하는 메서드
-//    private boolean isCareerYearMatching(Integer careerYear, Level level) {
-//        switch (level) {
-//            case JUNIOR:
-//                return careerYear < 3; // 3년 미만
-//            case MID:
-//                return careerYear >= 3 && careerYear < 7; // 3년 이상 7년 미만
-//            case SENIOR:
-//                return careerYear >= 7; // 7년 이상
-//            default:
-//                return false;
-//        }
-//    }
-
 }
Index: board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.board.repository;\r\n\r\nimport com.ssafy.stackup.domain.board.entity.Board;\r\nimport com.ssafy.stackup.domain.framework.entity.Framework;\r\nimport com.ssafy.stackup.domain.language.entity.Language;\r\nimport com.ssafy.stackup.domain.user.entity.Freelancer;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n//@Repository(\"BoardJpaRepo\")\r\npublic interface BoardRepository extends JpaRepository<Board, Long>{\r\n//    @Query(\"SELECT b FROM Board b WHERE (:worktype IS NULL OR b.worktype = :worktype) \" +\r\n//            \"AND (:deposit IS NULL OR b.deposit = :deposit) \" +\r\n//            \"AND (:classification IS NULL OR b.classification = :classification)\")\r\n    @Query(\"SELECT b FROM Board b WHERE \" +\r\n            \"(:worktype IS NULL OR b.worktype = :worktype) \" +\r\n            \"AND (\" +\r\n            \"(:deposit = '1' AND b.deposit < 500) \" +\r\n            \"OR (:deposit = '2' AND b.deposit >= 500 AND b.deposit < 1000) \" +\r\n            \"OR (:deposit = '3' AND b.deposit >= 1000 AND b.deposit < 5000) \" +\r\n            \"OR (:deposit = '4' AND b.deposit >= 5000 AND b.deposit < 10000) \" +\r\n            \"OR (:deposit = '5' AND b.deposit >= 10000) \" +\r\n            \"OR (:deposit IS NULL)\" +  // Allow for no filter if deposit is null\r\n            \") \" +\r\n            \"AND (:classification IS NULL OR b.classification = :classification)\")\r\n    List<Board> findByConditions(\r\n            @Param(\"worktype\") Boolean worktype,\r\n            @Param(\"deposit\") String deposit,\r\n            @Param(\"classification\") String classification);\r\n\r\n    @Query(\"select b from Board b \" +\r\n            \"left join fetch b.boardLanguages \" +\r\n            \"left join fetch b.boardFrameworks \" +\r\n            \"where b.boardId = :id\")\r\n    Optional<Board> findById(@Param(\"id\") Long id);\r\n\r\n    List<Framework> findFrameworksByBoardId(Long boardId);\r\n    List<Language> findLanguagesByBoardId(Long boardId);\r\n\r\n//    List<Board> findByBoardLanguagesInAndBoardFrameworksInAndLevel(List<String> languages, List<String> frameworks, String level);\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardRepository.java b/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardRepository.java
--- a/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardRepository.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardRepository.java	
@@ -1,9 +1,11 @@
 package com.ssafy.stackup.domain.board.repository;
 
+import com.ssafy.stackup.domain.board.dto.BoardSummaryDTO;
 import com.ssafy.stackup.domain.board.entity.Board;
 import com.ssafy.stackup.domain.framework.entity.Framework;
 import com.ssafy.stackup.domain.language.entity.Language;
 import com.ssafy.stackup.domain.user.entity.Freelancer;
+import org.springframework.data.jpa.repository.EntityGraph;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
@@ -14,9 +16,6 @@
 
 //@Repository("BoardJpaRepo")
 public interface BoardRepository extends JpaRepository<Board, Long>{
-//    @Query("SELECT b FROM Board b WHERE (:worktype IS NULL OR b.worktype = :worktype) " +
-//            "AND (:deposit IS NULL OR b.deposit = :deposit) " +
-//            "AND (:classification IS NULL OR b.classification = :classification)")
     @Query("SELECT b FROM Board b WHERE " +
             "(:worktype IS NULL OR b.worktype = :worktype) " +
             "AND (" +
@@ -33,14 +32,14 @@
             @Param("deposit") String deposit,
             @Param("classification") String classification);
 
-    @Query("select b from Board b " +
-            "left join fetch b.boardLanguages " +
-            "left join fetch b.boardFrameworks " +
-            "where b.boardId = :id")
-    Optional<Board> findById(@Param("id") Long id);
+    @EntityGraph(attributePaths = {"boardFrameworks", "boardLanguages", "boardApplicants"})
+    Optional<Board> findById(Long id);
 
     List<Framework> findFrameworksByBoardId(Long boardId);
     List<Language> findLanguagesByBoardId(Long boardId);
 
-//    List<Board> findByBoardLanguagesInAndBoardFrameworksInAndLevel(List<String> languages, List<String> frameworks, String level);
+    @Query("SELECT new com.ssafy.stackup.domain.board.dto.BoardSummaryDTO(b.boardId, b.period, b.deposit, b.level) " +
+            "FROM Board b WHERE b.boardId = :id")
+    BoardSummaryDTO findBoardFieldsById(@Param("id") Long id);
+
 }
Index: board/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server:\r\n  servlet:\r\n    context-path: /api\r\n\r\nspring:\r\n  datasource:\r\n    url: ${DB_URL} # 데이터베이스 URL (환경 변수 사용)\r\n    username: ${DB_USERNAME} # 데이터베이스 사용자 이름 (환경 변수 사용)\r\n    password: ${DB_PASSWORD} # 데이터베이스 비밀번호 (환경 변수 사용)\r\n    driver-class-name: com.mysql.cj.jdbc.Driver # 데이터베이스 드라이버 클래스 이름 설정\r\n\r\n  jpa:\r\n    #    show-sql: true # JPA SQL 출력 설정\r\n    database-platform: org.hibernate.dialect.MySQL8Dialect # JPA 데이터베이스 플랫폼 설정\r\n    hibernate:\r\n      ddl-auto: update # Hibernate DDL 자동 설정\r\n      properties:\r\n        hibernate:\r\n          dialect: org.hibernate.dialect.MySQL8Dialect # Hibernate 방언 설정\r\n\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 10MB\r\n      max-request-size: 20MB\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n\r\n  data:\r\n    redis:\r\n      host: ${REDIS_IP}\r\n      port: 6379\r\n      password: ${REDIS_PASSWORD}\r\n    elasticsearch:\r\n      repositories:\r\n        enabled: true\r\n  elasticsearch:\r\n    uris: http://localhost:9200\r\n    connection-timeout: 3000\r\n    socket-timeout: 3000\r\n\r\n\r\n\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          github:\r\n            client-secret: ${GITHUB_SECRET}\r\n            client-id: ${GITHUB_ID}\r\n            scope: read:user, user:email\r\n            redirect-uri: \"http://localhost:8080/api/login/oauth2/code/github\"\r\n        provider:\r\n          github:\r\n            authorization-uri: https://github.com/login/oauth/authorize\r\n            token-uri: https://github.com/login/oauth/access_token\r\n            user-info-uri: https://api.github.com/user\r\n  kafka:\r\n    bootstrap-servers: localhost:9092\r\n    consumer:\r\n      group-id: my-group\r\n      auto-offset-reset: earliest\r\n    producer:\r\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\r\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\r\n\r\n\r\n\r\njwt:\r\n  access_expiration_time: 360000000 # 1시간 액세스 토큰 만료 시간 설정\r\n  refresh_expiration_time: 604800016 # 1주일 리프레시 토큰 만료 시간 설정\r\n  secret: ${SECRET} # JWT 시크릿 키 설정 (환경 변수 사용)\r\n\r\nlogging:\r\n  level:\r\n#    root: info # 루트 로깅 레벨 설정\r\n#    com.ssafy: debug # com.wava 패키지 로깅 레벨 설정\r\n    org:\r\n      springframework:\r\n        data:\r\n          elasticsearch:\r\n            core: DEBUG\r\n    elasticsearch:\r\n      client: TRACE\r\n    apache:\r\n      http: TRACE\r\ncloud:\r\n  aws:\r\n    s3:\r\n      bucket: ${S3_BUCKET} # S3 버킷 이름 설정 (환경 변수 사용)\r\n    credentials:\r\n      access-key: ${AWS_ACCESS_KEY_ID} # AWS 액세스 키 (환경 변수 사용)\r\n      secret-key: ${AWS_SECRET_ACCESS_KEY} # AWS 시크릿 키 (환경 변수 사용)\r\n    region:\r\n      static: ap-northeast-2 # AWS 리전 설정 (환경 변수 사용)\r\n    stack:\r\n      auto: false # cloud formation 기능을 사용하지 않기 위함\r\n\r\nredirect:\r\n  url:\r\n    callback: \"http://localhost:5173/callback\"\r\n    main: \"http://localhost:5173\"\r\n\r\npublicDataPortal:\r\n  api:\r\n    url: ${PUBLIC_DATA_PORTAL_API_URL}\r\n    key: ${PUBLIC_DATA_PORTAL_API_KEY}\r\n\r\n\r\n\r\nportone:\r\n  api-key: 2266227468060441\r\n  api-secret: QuEDNv6I2IkSg2hqbpqAr31vy0fQK2DoqFYbMtE0GnG5eEdB9MSR6gHqkdhVx8xXoe8JqXSFN5pFR3Uv\r\n\r\n\r\n\r\n\r\ndefault:\r\n  image: https://raw.githubusercontent.com/tailwindlabs/heroicons/56c073c2c9a66d2e51adb93d8e87e2e941d5b6db/src/20/solid/user-circle.svg
===================================================================
diff --git a/board/src/main/resources/application.yml b/board/src/main/resources/application.yml
--- a/board/src/main/resources/application.yml	
+++ b/board/src/main/resources/application.yml	
@@ -34,9 +34,10 @@
       repositories:
         enabled: true
   elasticsearch:
-    uris: http://localhost:9200
+    uris: ${ELASTIC_URL}
     connection-timeout: 3000
     socket-timeout: 3000
+  #    password:
 
 
 
@@ -72,8 +73,8 @@
 
 logging:
   level:
-#    root: info # 루트 로깅 레벨 설정
-#    com.ssafy: debug # com.wava 패키지 로깅 레벨 설정
+    #    root: info # 루트 로깅 레벨 설정
+    #    com.ssafy: debug # com.wava 패키지 로깅 레벨 설정
     org:
       springframework:
         data:
Index: user/src/main/java/com/ssafy/stackup/domain/user/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.user.service;\r\n\r\n\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.ssafy.stackup.common.exception.CustomException;\r\nimport com.ssafy.stackup.common.exception.ResourceNotFoundException;\r\nimport com.ssafy.stackup.common.jwt.TokenProvider;\r\nimport com.ssafy.stackup.common.response.ErrorCode;\r\nimport com.ssafy.stackup.common.util.RedisUtil;\r\nimport com.ssafy.stackup.common.util.UserUtil;\r\nimport com.ssafy.stackup.domain.framework.entity.Framework;\r\nimport com.ssafy.stackup.domain.framework.repository.FrameworkRepository;\r\nimport com.ssafy.stackup.domain.language.entity.Language;\r\nimport com.ssafy.stackup.domain.language.repository.LanguageRepository;\r\nimport com.ssafy.stackup.domain.user.dto.request.ClientLoginRequestDto;\r\nimport com.ssafy.stackup.domain.user.dto.request.ClientSignUpRequestDto;\r\nimport com.ssafy.stackup.domain.user.dto.request.FreelancerInfoRequestDto;\r\nimport com.ssafy.stackup.domain.user.dto.response.*;\r\nimport com.ssafy.stackup.domain.user.entity.*;\r\nimport com.ssafy.stackup.domain.user.repository.ClientRepository;\r\nimport com.ssafy.stackup.domain.user.repository.FreelancerRepository;\r\nimport com.ssafy.stackup.domain.user.repository.UserRepository;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.http.*;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport java.util.*;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class UserServiceImpl implements UserService {\r\n    @Value(\"${default.image}\")\r\n    private String defaultImage;\r\n\r\n\r\n\r\n    @Value(\"${publicDataPortal.api.url}\")\r\n    private String publicDataPortalApiUrl;\r\n\r\n    @Value(\"${publicDataPortal.api.key}\")\r\n    private String publicDataPortalApiKey;\r\n\r\n\r\n    private final RestTemplate restTemplate;\r\n    private final ObjectMapper objectMapper;\r\n\r\n    private final UserRepository userRepository;\r\n    private final ClientRepository clientRepository;\r\n    private final FrameworkRepository frameworkRepository;\r\n    private final LanguageRepository languageRepository;\r\n    private final FreelancerRepository freelancerRepository;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n    private final AuthenticationManagerBuilder managerBuilder;\r\n    private final TokenProvider tokenProvider;\r\n    private final RedisUtil redisUtil;\r\n\r\n\r\n    @Override\r\n    @Transactional\r\n    public FreelancerRegisterResponseDto registerInfo(FreelancerInfoRequestDto freelancerInfoRequestDto, User user) {\r\n\r\n        Freelancer freelancer = freelancerRepository.findById(user.getId()).orElseThrow(\r\n                () -> new CustomException(ErrorCode.USER_NOT_FOUND)\r\n        );\r\n\r\n        //언어와 프레임워크 만들기\r\n        Set<FreelancerFramework> freelancerFrameworks = new HashSet<>();\r\n        Set<FreelancerLanguage> freelancerLanguages = new HashSet<>();\r\n\r\n        for (String frameworkName : freelancerInfoRequestDto.getFramework()) {\r\n            Framework framework = frameworkRepository.findByName(frameworkName)\r\n                    .orElseThrow(()->{ return new ResourceNotFoundException(\"해당 프레임워크 이름이 지정되지 않았습니다.\");});\r\n\r\n            FreelancerFramework freelancerFramework = FreelancerFramework.builder()\r\n                    .freelancer(freelancer)\r\n                    .framework(framework)\r\n                    .build();\r\n            freelancerFrameworks.add(freelancerFramework);\r\n\r\n        }\r\n\r\n        for (String languageName : freelancerInfoRequestDto.getLanguage()) {\r\n            Language language = languageRepository.findByName(languageName)\r\n                    .orElseThrow(()->{ throw new ResourceNotFoundException(\"해당 언어 이름이 지정되지 않았습니다.\");});\r\n            FreelancerLanguage freelancerLanguage = FreelancerLanguage.builder()\r\n                    .freelancer(freelancer)\r\n                    .language(language)\r\n                    .build();\r\n            freelancerLanguages.add(freelancerLanguage);\r\n        }\r\n\r\n        freelancer.updateName(freelancerInfoRequestDto.getName());\r\n        freelancer.updateAddress(freelancerInfoRequestDto.getAddress());\r\n        freelancer.updateEmail(freelancerInfoRequestDto.getEmail());\r\n        freelancer.updateClassification(freelancerInfoRequestDto.getClassification());\r\n        freelancer.updateCareerYear(freelancerInfoRequestDto.getCareerYear());\r\n        freelancer.updatePhone(freelancerInfoRequestDto.getPhone());\r\n        freelancer.updatePortfolioUrl(freelancerInfoRequestDto.getPortfolioUrl());\r\n        freelancer.updateSelfIntroduction(freelancerInfoRequestDto.getSelfIntroduction());\r\n        freelancer.updateFreelancerFrameworks(freelancerFrameworks);\r\n        freelancer.updateFreelancerLanguages(freelancerLanguages);\r\n\r\n        freelancerRepository.save(freelancer);\r\n\r\n        FreelancerRegisterResponseDto freelancerRegisterResponseDto = FreelancerRegisterResponseDto.builder()\r\n                .name(freelancer.getName())\r\n                .email(freelancer.getEmail())\r\n                .phone(freelancer.getPhone())\r\n                .classification(freelancer.getClassification())\r\n                .framework(freelancerInfoRequestDto.getFramework())\r\n                .language(freelancerInfoRequestDto.getLanguage())\r\n                .careerYear(freelancer.getCareerYear())\r\n                .portfolioURL(freelancer.getPortfolioUrl())\r\n                .selfIntroduction(freelancer.getSelfIntroduction())\r\n                .build();\r\n\r\n        return freelancerRegisterResponseDto;\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public ClientResponseDto signUp(ClientSignUpRequestDto requestDto) {\r\n        emailCheck(requestDto.getEmail());\r\n        String encodedPassword = bCryptPasswordEncoder.encode(requestDto.getPassword());\r\n        Client client = Client.builder()\r\n                .name(requestDto.getName())\r\n                .email(requestDto.getEmail())\r\n                .password(encodedPassword)\r\n                .roles(List.of(\"ROLE_CLIENT\"))\r\n                .phone(requestDto.getPhone())\r\n                .businessName(requestDto.getBusinessName())\r\n                .businessRegistrationNumber(requestDto.getBusinessRegistrationNumber())\r\n                .totalScore(0.0)\r\n                .reportedCount(0)\r\n                .evaluatedCount(0)\r\n                .build();\r\n\r\n\r\n        Client savedClient = clientRepository.save(client);\r\n\r\n        ClientResponseDto responseDto = ClientResponseDto.builder()\r\n                .id(savedClient.getId())\r\n                .email(savedClient.getEmail())\r\n                .name(savedClient.getName())\r\n                .businessRegistrationNumber(savedClient.getBusinessRegistrationNumber())\r\n                .businessName(savedClient.getBusinessName())\r\n                .phone(savedClient.getPhone())\r\n                .build();\r\n\r\n        return responseDto;\r\n    }\r\n\r\n\r\n    /**\r\n     * 클라이언트 로그인 인증 후 토큰 발행\r\n     * @ 작성자   : 이병수\r\n     * @ 작성일   : 2024-09-23\r\n     * @ 설명     :\r\n     * @param requestDto\r\n     * @param response\r\n     * @return\r\n     */\r\n    @Override\r\n    @Transactional\r\n    public LoginResponseDto login(ClientLoginRequestDto requestDto, HttpServletResponse response) {\r\n        String userType = \"client\";\r\n        Client user = clientRepository.findByEmail(requestDto.getEmail()).orElseThrow(\r\n                () -> new CustomException(ErrorCode.USER_NOT_FOUND)\r\n        );\r\n\r\n        UsernamePasswordAuthenticationToken authenticationToken = new\r\n                UsernamePasswordAuthenticationToken(String.valueOf(user.getId()), requestDto.getPassword());\r\n\r\n        Authentication authentication = managerBuilder.getObject().authenticate(authenticationToken);\r\n\r\n        TokenDto tokenDto = tokenProvider.generateToken(authentication,userType);\r\n        tokenToHeader(tokenDto, response);\r\n\r\n        redisUtil.setData(String.valueOf(user.getId()), tokenDto.refreshToken(), tokenDto.refreshTokenExpiresIn());\r\n        LoginResponseDto responseDto = LoginResponseDto.builder()\r\n                .id(user.getId())\r\n                .userType(userType)\r\n                .build();\r\n\r\n        return responseDto;\r\n    }\r\n\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public String logout(final HttpServletRequest request) {\r\n        String token = tokenProvider.resolveToken(request); // 헤더에서 AccessToken 가져오기\r\n        Authentication authentication = tokenProvider.getAuthentication(token); // 토큰 인증 후 페이로드에서 유저 정보 추출\r\n        redisUtil.deleteData(authentication.getName()); // 해당 유저의 key 삭제\r\n        Long accessExpiration = tokenProvider.getAccessExpiration(token);// AccessToken의 남은 시간 가져오기\r\n        redisUtil.setData(token,\"logout\",accessExpiration); // 로그아웃을 하더라도 AccessToken의 시간이 남아있으면 인증이 가능하여 블랙리스트로 추가\r\n        return \"로그아웃 성공\";\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public void reissue(final HttpServletRequest request, final HttpServletResponse response) {\r\n        String accessToken = tokenProvider.resolveToken(request);\r\n        tokenProvider.validateToken(accessToken);\r\n        Authentication authentication = tokenProvider.getAuthentication(accessToken);\r\n        String refreshToken = redisUtil.getData(authentication.getName());\r\n\r\n        if (refreshToken == null)\r\n            throw new CustomException(ErrorCode.UNKNOWN_TOKEN);\r\n        if (!Objects.equals(refreshToken, request.getHeader(\"refreshToken\")))\r\n            throw new CustomException(ErrorCode.WRONG_TYPE_TOKEN);\r\n        String userType = tokenProvider.getUserType(accessToken);\r\n        TokenDto tokenDto = tokenProvider.generateToken(authentication, userType);\r\n        tokenToHeader(tokenDto, response);\r\n\r\n        redisUtil.setData(authentication.getName(), tokenDto.refreshToken(), tokenDto.refreshTokenExpiresIn());\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public Boolean emailCheck(String email) {\r\n        Optional<Client> client = clientRepository.findByEmail(email);\r\n        if(client.isPresent()) {\r\n            throw new CustomException(ErrorCode.DUPLICATE_EMAIL);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * 해당 유저 신고 수 증가\r\n     * @param userId 신고받은 유저 고유번호\r\n     */\r\n    public void report(Long userId) {\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_FOUND));\r\n        user.updateReportedCount(user.getReportedCount()+1);\r\n        userRepository.save(user);\r\n    }\r\n\r\n    @Override\r\n    public Double grade(User user) {\r\n        User users = userRepository.findById(user.getId())\r\n                .orElseThrow(()-> new CustomException(ErrorCode.USER_NOT_FOUND));\r\n\r\n        return users.getTotalScore();\r\n    }\r\n\r\n\r\n    /**\r\n     * 내 상세 정보 조회\r\n     * @param user\r\n     * @return\r\n     */\r\n    @Override\r\n    public UserInfoResponseDto getInfo(User user) {\r\n\r\n        if(user.getRoles().contains(\"ROLE_FREELANCER\")) {\r\n            Freelancer freelancer = freelancerRepository.findById(user.getId()).orElseThrow(\r\n                    () -> new CustomException(ErrorCode.USER_NOT_FOUND)\r\n            );\r\n\r\n\r\n            List<String> frameworks = UserUtil.getFrameworks(freelancer.getFrameworks());\r\n            List<String> languages = UserUtil.getLanguages(freelancer.getLanguages());\r\n\r\n            FreelancerResponseDto freelancerResponseDto =   FreelancerResponseDto.builder()\r\n                    .id(freelancer.getId())\r\n                    .roles(freelancer.getRoles())\r\n                    .name(freelancer.getName())\r\n                    .phone(freelancer.getPhone())\r\n                    .email(freelancer.getEmail())\r\n                    .secondPassword(freelancer.getSecondPassword())\r\n                    .accountKey(freelancer.getAccountKey())\r\n                    .totalScore(freelancer.getTotalScore())\r\n                    .framework(frameworks)\r\n                    .language(languages)\r\n                    .careerYear(freelancer.getCareerYear())\r\n                    .portfolioURL(freelancer.getPortfolioUrl())\r\n                    .selfIntroduction(freelancer.getSelfIntroduction())\r\n                    .classification(freelancer.getClassification())\r\n                    .githubId(freelancer.getGithubId())\r\n                    .address(freelancer.getAddress())\r\n                    .build();\r\n            return freelancerResponseDto;\r\n\r\n\r\n        }else{\r\n\r\n            Client client = clientRepository.findById(user.getId())\r\n                    .orElseThrow(()-> new CustomException(ErrorCode.USER_NOT_FOUND));\r\n\r\n            ClientResponseDto clientResponseDto  = ClientResponseDto.builder()\r\n                    .id(client.getId())\r\n                    .roles(client.getRoles())\r\n                    .name(client.getName())\r\n                    .phone(client.getPhone())\r\n                    .email(client.getEmail())\r\n                    .secondPassword(client.getSecondPassword())\r\n                    .accountKey(client.getAccountKey())\r\n                    .businessRegistrationNumber(client.getBusinessRegistrationNumber())\r\n                    .businessName(client.getBusinessName())\r\n                    .reportedCount(client.getReportedCount())\r\n                    .totalScore(client.getTotalScore())\r\n                    .build();\r\n\r\n            return clientResponseDto;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @ 작성자   : 이병수\r\n     * @ 작성일   : 2024-09-19\r\n     * @ 설명     : 소셜 로그인 성공 후 데이터 전송\r\n     * @param userId 유저 아이디\r\n     * @return\r\n     */\r\n    @Override\r\n    public FreelancerLoginResponseDto token(Long userId) {\r\n\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(()-> new CustomException(ErrorCode.USER_NOT_FOUND));\r\n\r\n\r\n        Authentication authentication = tokenProvider.getAuthentication(redisUtil.getData(String.valueOf(userId)));\r\n        TokenDto tokenDto = tokenProvider.generateToken(authentication, \"freelancer\");\r\n\r\n        FreelancerLoginResponseDto freelancerLoginResponseDto =  FreelancerLoginResponseDto.builder()\r\n                .accessToken(tokenDto.accessToken())\r\n                .refreshToken(tokenDto.refreshToken())\r\n                .userId(userId)\r\n                .userType(\"freelancer\")\r\n                .build();\r\n\r\n        return freelancerLoginResponseDto;\r\n    }\r\n\r\n    /**\r\n     * @param tokenDto 로그인 시 발급한 토큰 데이터\r\n     * @param response 토큰을 헤더에 추가하기 위한 servlet\r\n     * @return\r\n     * @ 설명     : 헤더에  Access,Refresh토큰 추가\r\n     */\r\n    private void tokenToHeader(TokenDto tokenDto, HttpServletResponse response) {\r\n        response.addHeader(\"Authorization\", tokenDto.accessToken());\r\n        response.addHeader(\"refreshToken\", tokenDto.refreshToken());\r\n    }\r\n\r\n    public String getUserAddress(Long userId) {\r\n        User user = userRepository.findById(userId)\r\n                .orElseThrow(()-> new CustomException(ErrorCode.USER_NOT_FOUND));\r\n        String address = user.getUserAddress();\r\n        return address;\r\n    }\r\n\r\n\r\n\r\n    public boolean checkBusinessNum(String businessNum) {\r\n\r\n        String requestBody = \"{ \\\"b_no\\\": [\\\"\" + businessNum + \"\\\"] }\";\r\n\r\n        // 헤더 설정\r\n        HttpHeaders headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\r\n\r\n        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);\r\n\r\n        try {\r\n            // API 요청 보내기\r\n            String requestUrl = publicDataPortalApiUrl + \"?serviceKey=\" + publicDataPortalApiKey;\r\n            ResponseEntity<String> response = restTemplate.exchange(requestUrl, HttpMethod.POST, entity, String.class);\r\n\r\n            if (response.getStatusCode().is2xxSuccessful()) {\r\n                // JSON 파싱\r\n                JsonNode root = objectMapper.readTree(response.getBody());\r\n\r\n                // \"data\" 필드에서 사업자 상태 확인\r\n                JsonNode dataNode = root.path(\"data\").get(0);\r\n                String statusMessage = dataNode.path(\"tax_type\").asText();\r\n\r\n                // \"국세청에 등록되지 않은 사업자등록번호입니다.\" 라는 메시지가 있다면 false 반환\r\n                if (statusMessage.contains(\"국세청에 등록되지 않은 사업자등록번호\")) {\r\n                    return false;\r\n                }\r\n\r\n                // 유효한 사업자등록번호인 경우 true 반환\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // 기본적으로 false 반환\r\n        return false;\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/user/src/main/java/com/ssafy/stackup/domain/user/service/UserServiceImpl.java b/user/src/main/java/com/ssafy/stackup/domain/user/service/UserServiceImpl.java
--- a/user/src/main/java/com/ssafy/stackup/domain/user/service/UserServiceImpl.java	
+++ b/user/src/main/java/com/ssafy/stackup/domain/user/service/UserServiceImpl.java	
@@ -287,6 +287,7 @@
                     .email(freelancer.getEmail())
                     .secondPassword(freelancer.getSecondPassword())
                     .accountKey(freelancer.getAccountKey())
+                    .mainAccount(freelancer.getMainAccount())
                     .totalScore(freelancer.getTotalScore())
                     .framework(frameworks)
                     .language(languages)
Index: account/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.common.config;\r\n\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.client.ClientConfiguration;\r\nimport org.springframework.data.elasticsearch.client.elc.ElasticsearchConfiguration;\r\nimport org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;\r\n\r\n@Configuration\r\n@EnableElasticsearchRepositories(basePackages = \"com.ssafy.stackup.domain.recommend.repository\")\r\npublic class ElasticSearchConfig extends ElasticsearchConfiguration {\r\n    @Override\r\n    public ClientConfiguration clientConfiguration() {\r\n        return ClientConfiguration.builder()\r\n                .connectedTo(\"localhost:9200\")\r\n                .build();\r\n    }\r\n}\r\n
===================================================================
diff --git a/account/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java b/account/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java
--- a/account/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java	
+++ b/account/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java	
@@ -11,7 +11,7 @@
     @Override
     public ClientConfiguration clientConfiguration() {
         return ClientConfiguration.builder()
-                .connectedTo("localhost:9200")
+                .connectedTo("34.47.84.173:9200")
                 .build();
     }
 }
Index: board/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.user.dto.response;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.experimental.SuperBuilder;\r\n\r\nimport java.util.List;\r\n@Data\r\n@SuperBuilder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class UserInfoResponseDto {\r\n    private Long id;\r\n    protected String name;\r\n    protected String email;\r\n    private String phone;\r\n    private String secondPassword;\r\n    private String accountKey;\r\n    private Double totalScore;\r\n    private Integer reportedCount;\r\n    protected List<String> roles;\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java b/board/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java
--- a/board/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java	
@@ -17,6 +17,7 @@
     private String phone;
     private String secondPassword;
     private String accountKey;
+    private String mainAccount;
     private Double totalScore;
     private Integer reportedCount;
     protected List<String> roles;
Index: user/src/main/java/com/ssafy/stackup/common/oauth2/CustomOauth2SuccessHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.common.oauth2;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.ssafy.stackup.common.jwt.TokenProvider;\r\nimport com.ssafy.stackup.common.util.RedisUtil;\r\nimport com.ssafy.stackup.domain.user.dto.response.TokenDto;\r\nimport com.ssafy.stackup.domain.user.repository.FreelancerRepository;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * 작성자   : user\r\n * 작성날짜 : 2024-09-09\r\n * 설명    :\r\n */\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class CustomOauth2SuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\r\n\r\n\r\n\r\n    private final TokenProvider tokenProvider;\r\n    private final RedisUtil redisUtil;\r\n\r\n    private final FreelancerRepository freelancerRepository;\r\n    //    private final FrameworkRepository frameworkRepository;\r\n//    private final LanguageRepository languageRepository;\r\n    private final ObjectMapper objectMapper;\r\n\r\n    @Value(\"${redirect.url.callback}\")\r\n    private String redirectCallback;\r\n\r\n    @Value(\"${redirect.url.main}\")\r\n    private String redirectMainUrl;\r\n\r\n    @Override\r\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\r\n\r\n        System.out.println(\"로그인성공\");\r\n        String userType = \"freelancer\";\r\n        TokenDto tokenDto = tokenProvider.generateToken(authentication,userType);\r\n\r\n        // 생성된 토큰을 응답 헤더에 설정\r\n        tokenToHeader(tokenDto, response);\r\n\r\n        // Refresh Token을 Redis에 저장\r\n        String githubId = authentication.getName(); // 사용자 이메일 (또는 식별자)\r\n        redisUtil.setData(githubId, tokenDto.refreshToken(), tokenDto.refreshTokenExpiresIn());\r\n\r\n        //회원정보가 있다면 메인으로 이동시켜봅시다..\r\n        getRedirectStrategy().sendRedirect(request, response, redirectCallback);\r\n\r\n    }\r\n\r\n    private void tokenToHeader(TokenDto tokenDto, HttpServletResponse response) {\r\n        response.addHeader(\"Authorization\",tokenDto.accessToken());\r\n        response.addHeader(\"refreshToken\", tokenDto.refreshToken());\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/user/src/main/java/com/ssafy/stackup/common/oauth2/CustomOauth2SuccessHandler.java b/user/src/main/java/com/ssafy/stackup/common/oauth2/CustomOauth2SuccessHandler.java
--- a/user/src/main/java/com/ssafy/stackup/common/oauth2/CustomOauth2SuccessHandler.java	
+++ b/user/src/main/java/com/ssafy/stackup/common/oauth2/CustomOauth2SuccessHandler.java	
@@ -56,7 +56,8 @@
         redisUtil.setData(githubId, tokenDto.refreshToken(), tokenDto.refreshTokenExpiresIn());
 
         //회원정보가 있다면 메인으로 이동시켜봅시다..
-        getRedirectStrategy().sendRedirect(request, response, redirectCallback);
+        //회원정보가 있다면 메인으로 이동시켜봅시다..
+        getRedirectStrategy().sendRedirect(request, response, redirectCallback+"?userId="+authentication.getName());
 
     }
 
Index: board/src/main/java/com/ssafy/stackup/domain/board/controller/BoardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.board.controller;\r\n\r\nimport com.ssafy.stackup.common.exception.CustomException;\r\nimport com.ssafy.stackup.common.response.ApiResponse;\r\nimport com.ssafy.stackup.common.response.ErrorCode;\r\nimport com.ssafy.stackup.domain.board.dto.*;\r\nimport com.ssafy.stackup.domain.board.entity.Board;\r\nimport com.ssafy.stackup.domain.board.service.BoardService;\r\nimport com.ssafy.stackup.domain.recommend.entity.Recommend;\r\nimport com.ssafy.stackup.domain.recommend.service.RecommendationService;\r\nimport com.ssafy.stackup.domain.user.entity.AuthUser;\r\nimport com.ssafy.stackup.domain.user.entity.Client;\r\nimport com.ssafy.stackup.domain.user.entity.Freelancer;\r\nimport com.ssafy.stackup.domain.user.entity.User;\r\nimport com.ssafy.stackup.domain.user.repository.ClientRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@RequestMapping(\"/board\")\r\npublic class BoardController {\r\n\r\n    @Autowired\r\n    private BoardService boardService;\r\n\r\n    @Autowired\r\n    private ClientRepository clientRepository;\r\n\r\n    @Autowired\r\n    private RecommendationService recommendationService;\r\n\r\n\r\n    @GetMapping\r\n    public ResponseEntity<?> findAllBoards(){\r\n        List<?> boards = boardService.getboards();\r\n        return ResponseEntity.ok().body(ApiResponse.success(boards));\r\n    }\r\n\r\n    @GetMapping(\"/recommend-list\")\r\n    public List<Recommend> findAllRecommendations(){\r\n//        List<?> recommends = recommendationService.findRecommend();\r\n//        return ResponseEntity.ok().body(ApiResponse.success(recommends));\r\n        return recommendationService.findRecommend();\r\n    }\r\n\r\n    //모집글 상세 조회\r\n    @GetMapping(\"/{boardId}\")\r\n    public ResponseEntity<?> findBoardById(@PathVariable Long boardId){\r\n        Board board = boardService.findByBoardId(boardId);\r\n        return ResponseEntity.ok().body(ApiResponse.success(new BoardFindOneResponse(board)));\r\n    }\r\n\r\n    //모집글 삭제\r\n    @DeleteMapping(\"/{boardId}\")\r\n    public ResponseEntity<?> deleteBoard(@PathVariable Long boardId){\r\n        boardService.deleteBoard(boardId);\r\n        return ResponseEntity.ok().body(ApiResponse.success(\"모집글 삭제 성공\"));\r\n    }\r\n\r\n\r\n    @PostMapping\r\n    public ResponseEntity<?> createBoard(@RequestBody BoardCreateRequest request, @AuthUser User user) {\r\n        Client client = clientRepository.findById(user.getId())\r\n                .orElseThrow(()-> new CustomException(ErrorCode.USER_NOT_FOUND));\r\n//        if (!(user instanceof Client)) {\r\n//            return ResponseEntity.badRequest().body(\"Invalid user type\");\r\n//        }\r\n//\r\n//        Client client = (Client) user;\r\n//        if (!(user instanceof Freelancer)) {\r\n//            return ResponseEntity.badRequest().body(\"Invalid user type\");\r\n//        }\r\n//\r\n//        Freelancer freelancer = (Freelancer) user;\r\n\r\n        Board board = Board.builder()\r\n                .title(request.getTitle())\r\n                .description(request.getDescription())\r\n                .classification(request.getClassification())\r\n                .boardFrameworks(new ArrayList<>())\r\n                .boardLanguages(new ArrayList<>())\r\n                .deposit(request.getDeposit())\r\n                .startDate(request.getStartDate())\r\n                .period(request.getPeriod())\r\n                .recruits(request.getRecruits())\r\n                .applicants(request.getApplicants())\r\n                .worktype(request.getWorktype())\r\n                .requirements(request.getRequirements())\r\n                .isCharged(request.getIsCharged())\r\n                .address(request.getAddress())\r\n                .level(request.getLevel())\r\n                .deadline(request.getDeadline())\r\n                .upload(request.getUpload())\r\n                .client(client)\r\n                .build();\r\n\r\n        BoardFindAllResponse result = boardService.createBoard(board, request.getFrameworks(), request.getLanguages(), client);\r\n\r\n        return ResponseEntity.ok().body(ApiResponse.success(result));\r\n    }\r\n\r\n    @GetMapping(\"/search\")\r\n    public ResponseEntity<?> conditionedBoards(\r\n            @RequestParam(value = \"worktype\", required = false) Boolean worktype,\r\n            @RequestParam(value = \"deposit\", required = false) String deposit,\r\n            @RequestParam(value = \"classification\", required = false) String classification){\r\n//        BoardFindAllResponse result = boardService.findBoardsByConditions(worktype, deposit, classification);\r\n        List<?> boards = boardService.findBoardsByConditions(worktype, deposit, classification);\r\n//        List<BoardFindAllResponse> responseList = boards.stream()\r\n//                .map(BoardFindAllResponse::new)\r\n//                .collect(Collectors.toList());\r\n        return ResponseEntity.ok().body(ApiResponse.success(boards));\r\n    }\r\n\r\n    @PostMapping(\"/{boardId}/apply\")\r\n    public ResponseEntity<?> applyToBoard(@PathVariable Long boardId, @AuthUser User user){\r\n        Long freelancerId = user.getId();\r\n        boardService.applyToBoard(boardId, freelancerId);\r\n        return ResponseEntity.ok(\"지원완료\");\r\n    }\r\n\r\n    @GetMapping(\"/{boardId}/applicant-list\")\r\n    public List<BoardApplicantRequest> getApplicantList(@PathVariable Long boardId) {\r\n        return boardService.getApplicantListByBoardId(boardId);\r\n    }\r\n\r\n    @PostMapping(\"/{boardId}/payment-success\")\r\n    public ResponseEntity<?> handlePaymentSuccess(@PathVariable Long boardId, @RequestBody PaymentSuccessRequest request) {\r\n        try {\r\n            // Optional: You can verify the payment status by contacting the payment gateway (e.g., with IMP UID)\r\n            // For now, we'll assume the payment is successful and proceed to update the board\r\n\r\n            boardService.updateIsCharged(boardId);\r\n            return ResponseEntity.ok().body(Map.of(\"success\", true));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(500).body(Map.of(\"success\", false, \"error\", e.getMessage()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @ 작성자   : 김연지\r\n     * @ 작성일   : 2024-09-26\r\n     * @ 설명     : 프리랜서 스킬셋(대분류, 언어, 프레임워크, 경력) 기반으로 일감(board)추천\r\n     * @param user\r\n     * @return\r\n     */\r\n    @GetMapping(\"/recommend\")\r\n    public Set<Recommend> recommendBoards(@AuthUser User user) {\r\n        Long freelancerId = user.getId();\r\n        Set<Recommend> recommendBoards = recommendationService.recommendBoardsForFreelancer(freelancerId);\r\n        return recommendBoards;\r\n    }\r\n\r\n//    @GetMapping(\"/recommend/all\")\r\n//    public Set<Recommend> recommendAll(@AuthUser User user) {\r\n//        Long freelancerId = user.getId();\r\n//        Set<Recommend> results = recommendationService.recommends(freelancerId);\r\n//        return results;\r\n//    }\r\n\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/board/controller/BoardController.java b/board/src/main/java/com/ssafy/stackup/domain/board/controller/BoardController.java
--- a/board/src/main/java/com/ssafy/stackup/domain/board/controller/BoardController.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/board/controller/BoardController.java	
@@ -5,6 +5,8 @@
 import com.ssafy.stackup.common.response.ErrorCode;
 import com.ssafy.stackup.domain.board.dto.*;
 import com.ssafy.stackup.domain.board.entity.Board;
+import com.ssafy.stackup.domain.board.entity.BoardApplicant;
+import com.ssafy.stackup.domain.board.repository.BoardApplicantRepository;
 import com.ssafy.stackup.domain.board.service.BoardService;
 import com.ssafy.stackup.domain.recommend.entity.Recommend;
 import com.ssafy.stackup.domain.recommend.service.RecommendationService;
@@ -157,6 +159,26 @@
         return recommendBoards;
     }
 
+    @Autowired
+    BoardApplicantRepository boardApplicantRepository;
+
+    /**
+     *
+     * @ 작성자   : 김연지
+     * @ 작성일   : 2024-09-29
+     * @ 설명     : 프리랜서가 지원한 board 전체 조회
+     * @param user
+     * @return
+     */
+    @GetMapping("/apply-board")
+    public List<BoardFindAllResponse> applyBoards(@AuthUser User user) {
+        Long userId = user.getId();
+        List<Board> boards = boardApplicantRepository.findBoardsByUserId(userId);
+        return boards.stream()
+                .map(BoardFindAllResponse::new)
+                .collect(Collectors.toList());
+    }
+
 //    @GetMapping("/recommend/all")
 //    public Set<Recommend> recommendAll(@AuthUser User user) {
 //        Long freelancerId = user.getId();
Index: board/src/main/java/com/ssafy/stackup/domain/board/service/BoardService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.board.service;\r\n\r\nimport com.ssafy.stackup.common.exception.ResourceNotFoundException;\r\nimport com.ssafy.stackup.domain.board.dto.BoardApplicantRequest;\r\nimport com.ssafy.stackup.domain.board.dto.BoardCreateRequest;\r\nimport com.ssafy.stackup.domain.board.dto.BoardFindAllResponse;\r\nimport com.ssafy.stackup.domain.board.entity.Board;\r\nimport com.ssafy.stackup.domain.board.entity.BoardApplicant;\r\nimport com.ssafy.stackup.domain.board.entity.BoardFramework;\r\nimport com.ssafy.stackup.domain.board.entity.BoardLanguage;\r\nimport com.ssafy.stackup.domain.board.repository.BoardApplicantRepository;\r\nimport com.ssafy.stackup.domain.board.repository.BoardRepository;\r\nimport com.ssafy.stackup.domain.framework.dto.BoardFrameworkUpdateRequest;\r\nimport com.ssafy.stackup.domain.framework.dto.FrameworkRequest;\r\nimport com.ssafy.stackup.domain.framework.entity.Framework;\r\nimport com.ssafy.stackup.domain.framework.repository.BoardFrameworkRepository;\r\nimport com.ssafy.stackup.domain.framework.repository.FrameworkRepository;\r\nimport com.ssafy.stackup.domain.framework.service.FrameworkService;\r\nimport com.ssafy.stackup.domain.language.dto.BoardLanguageUpdateRequest;\r\nimport com.ssafy.stackup.domain.language.entity.Language;\r\nimport com.ssafy.stackup.domain.language.repository.BoardLanguageRepository;\r\nimport com.ssafy.stackup.domain.language.repository.LanguageRepository;\r\nimport com.ssafy.stackup.domain.recommend.entity.Recommend;\r\nimport com.ssafy.stackup.domain.recommend.repository.BoardElasticsearchRepository;\r\nimport com.ssafy.stackup.domain.recommend.service.RecommendationService;\r\nimport com.ssafy.stackup.domain.user.entity.Client;\r\nimport com.ssafy.stackup.domain.user.entity.Freelancer;\r\nimport com.ssafy.stackup.domain.user.repository.FreelancerRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport javax.swing.text.html.Option;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Transactional\r\n@Slf4j\r\npublic class BoardService {\r\n\r\n    @Autowired\r\n    private BoardRepository boardRepository;\r\n\r\n    @Autowired\r\n    private FrameworkRepository frameworkRepository;\r\n\r\n    private BoardFrameworkRepository boardFrameworkRepository;\r\n\r\n    @Autowired\r\n    private LanguageRepository languageRepository;\r\n\r\n    private BoardLanguageRepository boardLanguageRepository;\r\n    @Autowired\r\n    private FrameworkService frameworkService;\r\n\r\n    @Autowired\r\n    private FreelancerRepository freelancerRepository;\r\n\r\n    @Autowired\r\n    private BoardApplicantRepository boardApplicantRepository;\r\n\r\n    @Autowired\r\n    private BoardElasticsearchRepository boardElasticsearchRepository;\r\n    @Autowired\r\n    private RecommendationService recommendationService;\r\n\r\n    //모집글 목록 조회\r\n    @Transactional(readOnly = true)\r\n    public List<BoardFindAllResponse> getboards() {\r\n        List<Board> boards = boardRepository.findAll();\r\n        return boards.stream()\r\n                .map(BoardFindAllResponse::new)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    //조건에 맞는 게시글 조회\r\n    @Transactional(readOnly = true)\r\n    public List<BoardFindAllResponse> findBoardsByConditions(Boolean worktype, String deposit, String classification) {\r\n        List<Board> boards = boardRepository.findByConditions(worktype, deposit, classification);\r\n        return boards.stream()\r\n                .map(BoardFindAllResponse::new)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    //모집글 상세 조회\r\n    @Transactional(readOnly = true)\r\n    public Board findByBoardId(Long boardId){\r\n        return  boardRepository.findById(boardId)\r\n                .orElseThrow(()-> new ResourceNotFoundException(\"게시글이 존재하지 않음\"));\r\n    }\r\n\r\n    //모집글 삭제\r\n    public void deleteBoard(Long boardId){\r\n        Board board = boardRepository.findById(boardId)\r\n                .orElseThrow(()-> new ResourceNotFoundException(\"게시글이 존재하지 않음\"));\r\n\r\n        boardRepository.delete(board);\r\n    }\r\n\r\n    @Transactional(readOnly = true)\r\n    public List<BoardFindAllResponse> findBoardsByIds(Set<Long> boardIds) {\r\n        // boardIds 리스트를 사용하여 각 boardId에 해당하는 Board를 찾기\r\n        List<Board> boards = boardIds.stream()\r\n                .map(boardId -> boardRepository.findById(boardId)\r\n                        .orElseThrow(() -> new ResourceNotFoundException(\"게시글이 존재하지 않음: \" + boardId)))\r\n                .collect(Collectors.toList());\r\n\r\n        return boards.stream()\r\n                .map(BoardFindAllResponse::new)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n\r\n\r\n    //모집글 작성\r\n    public BoardFindAllResponse createBoard(Board board, List<BoardFrameworkUpdateRequest> frameworkRequests, List<BoardLanguageUpdateRequest> languageRequests, Client client) {\r\n        board.setClient(client);\r\n        List<BoardFramework> frameworks = new ArrayList<>();\r\n        List<BoardLanguage> languages = new ArrayList<>();\r\n\r\n        Set<Long> uniqueFrameworkIds = frameworkRequests.stream()\r\n                .map(BoardFrameworkUpdateRequest::getFrameworkId)\r\n                .collect(Collectors.toSet());\r\n\r\n        Set<Long> uniqueLanguageIds = languageRequests.stream()\r\n                .map(BoardLanguageUpdateRequest::getLanguageId)\r\n                .collect(Collectors.toSet());\r\n\r\n\r\n        for(Long frameworkId : uniqueFrameworkIds) {\r\n            Framework framework = frameworkRepository.findById(frameworkId)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"프레임워크가 존재하지 않음\"));\r\n            BoardFramework boardFramework = BoardFramework.builder()\r\n                    .framework(framework)\r\n//                    .board(board)\r\n                    .build();\r\n            frameworks.add(boardFramework);\r\n        }\r\n       board.setBoardFrameworks(frameworks);\r\n\r\n//        List<String> languageNames = new ArrayList<>();\r\n\r\n        for(Long languageId : uniqueLanguageIds) {\r\n            Language language = languageRepository.findById(languageId)\r\n                    .orElseThrow(() -> new ResourceNotFoundException(\"언어가 존재하지 않음\"));\r\n            BoardLanguage boardLanguage = BoardLanguage.builder()\r\n                    .language(language)\r\n//                    .board(board)\r\n                    .build();\r\n            languages.add(boardLanguage);\r\n//            languageNames.add(language.getName());\r\n        }\r\n        board.setBoardLanguages(languages);\r\n\r\n        Recommend recommend = new Recommend();\r\n        recommend.setClassification(board.getClassification());\r\n        recommend.setFrameworks(board.getBoardFrameworks());\r\n        recommend.setLanguages(board.getBoardLanguages());\r\n//        recommend.setLanguages(languageNames);\r\n//        recommend.setFrameworks(frameworkNames);\r\n        recommend.setLevel(board.getLevel());\r\n        recommend.setTitle(board.getTitle());\r\n        recommend.setDeposit(board.getDeposit());\r\n\r\n\r\n        Board result = boardRepository.save(board);\r\n\r\n        recommend.setBoardId(result.getBoardId());\r\n        boardElasticsearchRepository.save(recommend);\r\n\r\n        return new BoardFindAllResponse(board);\r\n    }\r\n\r\n    @Transactional(readOnly = true)\r\n    public List<FrameworkRequest> findFrameworks(Long boardId) {\r\n        return frameworkService.findFrameworkByBoardId(boardId).stream()\r\n                .map(FrameworkRequest::new)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public void applyToBoard(Long boardId, Long freelancerId) {\r\n        Board board = boardRepository.findById(boardId)\r\n                .orElseThrow(() -> new RuntimeException(\"Board not found\"));\r\n        Freelancer freelancer = freelancerRepository.findById(freelancerId)\r\n                .orElseThrow(() -> new RuntimeException(\"Freelancer not found\"));\r\n\r\n        BoardApplicant boardApplicant = new BoardApplicant();\r\n//        boardApplicant.setBoard(board);\r\n        boardApplicant.setFreelancer(freelancer);\r\n\r\n        // Add boardApplicant to the board's list\r\n        board.getBoardApplicants().add(boardApplicant);\r\n        boardApplicantRepository.save(boardApplicant);\r\n    }\r\n\r\n    public List<BoardApplicantRequest> getApplicantListByBoardId(Long boardId) {\r\n        List<BoardApplicant> applicants = boardApplicantRepository.findByBoard_BoardId(boardId);\r\n        return applicants.stream()\r\n                .map(BoardApplicantRequest::new)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public void updateIsCharged(Long boardId) {\r\n        Board board = boardRepository.findById(boardId)\r\n                .orElseThrow(() -> new ResourceNotFoundException(\"Board not found\"));\r\n        board.setIsCharged(true);\r\n        boardRepository.save(board);\r\n    }\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/board/service/BoardService.java b/board/src/main/java/com/ssafy/stackup/domain/board/service/BoardService.java
--- a/board/src/main/java/com/ssafy/stackup/domain/board/service/BoardService.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/board/service/BoardService.java	
@@ -193,7 +193,7 @@
                 .orElseThrow(() -> new RuntimeException("Freelancer not found"));
 
         BoardApplicant boardApplicant = new BoardApplicant();
-//        boardApplicant.setBoard(board);
+        boardApplicant.setBoard(board);
         boardApplicant.setFreelancer(freelancer);
 
         // Add boardApplicant to the board's list
Index: user/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.user.dto.response;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.experimental.SuperBuilder;\r\n\r\nimport java.util.List;\r\n@Data\r\n@SuperBuilder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class UserInfoResponseDto {\r\n    private Long id;\r\n    protected String name;\r\n    protected String email;\r\n    private String phone;\r\n    private String secondPassword;\r\n    private String accountKey;\r\n    private Double totalScore;\r\n    private Integer reportedCount;\r\n    protected List<String> roles;\r\n}\r\n
===================================================================
diff --git a/user/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java b/user/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java
--- a/user/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java	
+++ b/user/src/main/java/com/ssafy/stackup/domain/user/dto/response/UserInfoResponseDto.java	
@@ -17,6 +17,7 @@
     private String phone;
     private String secondPassword;
     private String accountKey;
+    private String mainAccount;
     private Double totalScore;
     private Integer reportedCount;
     protected List<String> roles;
Index: board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardApplicantRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.board.repository;\r\n\r\nimport com.ssafy.stackup.domain.board.entity.BoardApplicant;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\npublic interface BoardApplicantRepository extends JpaRepository<BoardApplicant, Long> {\r\n    List<BoardApplicant> findByBoard_BoardId(Long boardId);\r\n    BoardApplicant findByFreelancer_IdAndBoard_BoardId(Long freelancerId, Long boardId);\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardApplicantRepository.java b/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardApplicantRepository.java
--- a/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardApplicantRepository.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/board/repository/BoardApplicantRepository.java	
@@ -1,11 +1,18 @@
 package com.ssafy.stackup.domain.board.repository;
 
+import com.ssafy.stackup.domain.board.entity.Board;
 import com.ssafy.stackup.domain.board.entity.BoardApplicant;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 
 import java.util.List;
 
 public interface BoardApplicantRepository extends JpaRepository<BoardApplicant, Long> {
     List<BoardApplicant> findByBoard_BoardId(Long boardId);
     BoardApplicant findByFreelancer_IdAndBoard_BoardId(Long freelancerId, Long boardId);
+
+    // user_id로 board 검색
+    @Query("SELECT ba.board FROM BoardApplicant ba WHERE ba.freelancer.id = :userId")
+    List<Board> findBoardsByUserId(@Param("userId") Long userId);
 }
Index: board/src/main/java/com/ssafy/stackup/domain/board/controller/DetectionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.domain.board.controller;\r\n\r\nimport com.ssafy.stackup.domain.board.entity.Board;\r\nimport com.ssafy.stackup.domain.board.repository.BoardRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpEntity;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.http.ResponseEntity;\r\n//import org.springframework.kafka.annotation.KafkaListener;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport java.util.concurrent.BlockingQueue;\r\nimport java.util.concurrent.LinkedBlockingQueue;\r\n\r\n@RestController\r\n@RequestMapping(\"/detect/illegal/{boardId}\")\r\npublic class DetectionController {\r\n\r\n    @Autowired\r\n    private BoardRepository boardRepository;\r\n\r\n    private final BlockingQueue<String> analysisResultsQueue = new LinkedBlockingQueue<>();\r\n    private final RestTemplate restTemplate = new RestTemplate();\r\n\r\n//    @KafkaListener(topics = \"analysis_results\", groupId = \"group_id\")\r\n//    public void listen(String message) {\r\n//        analysisResultsQueue.offer(message);\r\n//    }\r\n\r\n    @GetMapping\r\n    public ResponseEntity<String> detectIllegal(@PathVariable Long boardId) {\r\n        // 데이터베이스에서 프로젝트 정보 조회\r\n        Board board = boardRepository.findById(boardId).orElse(null);\r\n        if (board == null) {\r\n            return ResponseEntity.badRequest().body(\"Project not found\");\r\n        }\r\n\r\n        // Flask 서버에 데이터 전송\r\n        String flaskUrl = \"http://localhost:5000/api/analyze\";\r\n        HttpHeaders headers = new HttpHeaders();\r\n        headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);\r\n        String requestData = String.format(\r\n                \"{ \\\"boardId\\\": \\\"%s\\\", \\\"period\\\": %s, \\\"deposit\\\": %s, \\\"level\\\": %s }\",\r\n                board.getBoardId(), board.getPeriod(), board.getDeposit(), board.getLevel()\r\n        );\r\n        HttpEntity<String> requestEntity = new HttpEntity<>(requestData, headers);\r\n\r\n        try {\r\n            ResponseEntity<String> response = restTemplate.exchange(flaskUrl, HttpMethod.POST, requestEntity, String.class);\r\n            if (response.getStatusCode().is2xxSuccessful()) {\r\n                // Kafka에서 결과 수신\r\n                String result = analysisResultsQueue.take();  // 결과를 가져옵니다\r\n                return ResponseEntity.ok(result);\r\n            } else {\r\n                return ResponseEntity.status(response.getStatusCode()).body(\"Failed to process request\");\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt(); // 복구 가능\r\n            return ResponseEntity.status(500).body(\"Error retrieving result\");\r\n        } catch (Exception e) {\r\n//            e.printStackTrace();\r\n            return ResponseEntity.status(500).body(\"Error processing request\");\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/board/src/main/java/com/ssafy/stackup/domain/board/controller/DetectionController.java b/board/src/main/java/com/ssafy/stackup/domain/board/controller/DetectionController.java
--- a/board/src/main/java/com/ssafy/stackup/domain/board/controller/DetectionController.java	
+++ b/board/src/main/java/com/ssafy/stackup/domain/board/controller/DetectionController.java	
@@ -1,5 +1,6 @@
 package com.ssafy.stackup.domain.board.controller;
 
+import com.ssafy.stackup.domain.board.dto.BoardSummaryDTO;
 import com.ssafy.stackup.domain.board.entity.Board;
 import com.ssafy.stackup.domain.board.repository.BoardRepository;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -8,6 +9,7 @@
 import org.springframework.http.HttpMethod;
 import org.springframework.http.ResponseEntity;
 //import org.springframework.kafka.annotation.KafkaListener;
+import org.springframework.kafka.annotation.KafkaListener;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -27,15 +29,18 @@
     private final BlockingQueue<String> analysisResultsQueue = new LinkedBlockingQueue<>();
     private final RestTemplate restTemplate = new RestTemplate();
 
-//    @KafkaListener(topics = "analysis_results", groupId = "group_id")
-//    public void listen(String message) {
-//        analysisResultsQueue.offer(message);
-//    }
+    @KafkaListener(topics = "analysis_results", groupId = "group_id")
+    public void listen(String message) {
+        analysisResultsQueue.offer(message);
+    }
+
+
 
     @GetMapping
     public ResponseEntity<String> detectIllegal(@PathVariable Long boardId) {
         // 데이터베이스에서 프로젝트 정보 조회
-        Board board = boardRepository.findById(boardId).orElse(null);
+//        Board board = boardRepository.findBoardFieldsById(boardId);
+        BoardSummaryDTO board = boardRepository.findBoardFieldsById(boardId);
         if (board == null) {
             return ResponseEntity.badRequest().body("Project not found");
         }
@@ -44,14 +49,34 @@
         String flaskUrl = "http://localhost:5000/api/analyze";
         HttpHeaders headers = new HttpHeaders();
         headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);
+
+        // level 값을 매핑하는 코드 추가
+        int levelValue;
+        switch (board.getLevel()) {
+            case JUNIOR:
+                levelValue = 1; // 주니어
+                break;
+            case MID:
+                levelValue = 2; // 미드 레벨
+                break;
+            case SENIOR:
+                levelValue = 3; // 시니어
+                break;
+            default:
+                levelValue = 0; // 레벨 미선택
+                break;
+        }
         String requestData = String.format(
-                "{ \"boardId\": \"%s\", \"period\": %s, \"deposit\": %s, \"level\": %s }",
-                board.getBoardId(), board.getPeriod(), board.getDeposit(), board.getLevel()
+                "{ \"boardId\": %d, \"period\": %s, \"deposit\": %d, \"level\": %s }",
+                 board.getBoardId(), board.getPeriod(), board.getDeposit(), levelValue
         );
+        System.out.println("Request Body: " + requestData);
+
         HttpEntity<String> requestEntity = new HttpEntity<>(requestData, headers);
 
         try {
             ResponseEntity<String> response = restTemplate.exchange(flaskUrl, HttpMethod.POST, requestEntity, String.class);
+            System.out.println(response.getBody());
             if (response.getStatusCode().is2xxSuccessful()) {
                 // Kafka에서 결과 수신
                 String result = analysisResultsQueue.take();  // 결과를 가져옵니다
@@ -63,7 +88,7 @@
             Thread.currentThread().interrupt(); // 복구 가능
             return ResponseEntity.status(500).body("Error retrieving result");
         } catch (Exception e) {
-//            e.printStackTrace();
+            e.printStackTrace();
             return ResponseEntity.status(500).body("Error processing request");
         }
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"770a738c-7cff-4cbe-947d-9fe8c12c7597\" name=\"Changes\" comment=\"init : msa 기본구조\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"stackUp\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"dev/be\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitLabMergeRequestFiltersHistory\">{\r\n  &quot;lastFilter&quot;: {}\r\n}</component>\r\n  <component name=\"GitLabMergeRequestsSettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;first&quot;: &quot;https://lab.ssafy.com/s11-fintech-finance-sub1/S11P21C103.git&quot;,\r\n    &quot;second&quot;: &quot;ddd4628b-8931-478d-a07c-13f18de3ef37&quot;\r\n  }\r\n}</component>\r\n  <component name=\"KubernetesApiPersistence\">{}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mRwJRZEkAitlKJqsDdsn7XnC5P\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollToSource\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Gradle.Build backend.executor\": \"Run\",\r\n    \"Gradle.Download Sources.executor\": \"Run\",\r\n    \"RequestMappingsPanelOrder0\": \"0\",\r\n    \"RequestMappingsPanelOrder1\": \"1\",\r\n    \"RequestMappingsPanelWidth0\": \"75\",\r\n    \"RequestMappingsPanelWidth1\": \"75\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"Spring Boot.StackUpApplication.executor\": \"Run\",\r\n    \"git-widget-placeholder\": \"be/msa-user\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/SSAFY/Desktop/S11P21C103/backend/src/main/java/com/ssafy/stackup/domain\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"fileTemplates\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"mysql\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"ReactorSettings\">\r\n    <option name=\"notificationShown\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"com.ssafy.stackup.domain.board.entity\" />\r\n      <recent name=\"com.ssafy.stackup.domain.project.dto.response\" />\r\n      <recent name=\"com.ssafy.stackup.domain.chat.dto.reqeust\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\SSAFY\\Desktop\\S11P21C103\\backend\\src\\main\\java\\com\\ssafy\\stackup\\domain\" />\r\n      <recent name=\"C:\\Users\\SSAFY\\Desktop\\S11P21C103\\backend\\src\\main\\java\\com\\ssafy\\stackup\\domain\\user\" />\r\n      <recent name=\"C:\\Users\\SSAFY\\Desktop\\S11P21C103\\backend\\src\\main\\java\\com\\ssafy\\stackup\\domain\\evaluation\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.ssafy.stackup.common.config\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunDashboard\">\r\n    <option name=\"configurationTypes\">\r\n      <set>\r\n        <option value=\"SpringBootApplicationConfigurationType\" />\r\n        <option value=\"TestNG\" />\r\n      </set>\r\n    </option>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"StackUpApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <envs>\r\n        <env name=\"AWS_ACCESS_KEY_ID\" value=\"AKIAYS2NQJX3RYCARFUQ\" />\r\n        <env name=\"AWS_SECRET_ACCESS_KEY\" value=\"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\" />\r\n        <env name=\"DB_PASSWORD\" value=\"ssafy\" />\r\n        <env name=\"DB_URL\" value=\"jdbc:mysql://localhost:3306/ssafy\" />\r\n        <env name=\"DB_USERNAME\" value=\"ssafy\" />\r\n        <env name=\"GITHUB_ID\" value=\"Iv23li51nY1w8lyOBlai\" />\r\n        <env name=\"GITHUB_SECRET\" value=\"c2cd01f968c1d38a9b528cece96b3de94ab43733\" />\r\n        <env name=\"PUBLIC_DATA_PORTAL_API_KEY\" value=\"npc0/ueEMOagYro4kXt4rObYM1FEIbIV/UvVUHM5zG2K9E4zl2cEFx3uvkJfM13LxXPrJG2jYh/I9mZoxbB8ig==\" />\r\n        <env name=\"PUBLIC_DATA_PORTAL_API_URL\" value=\"https://api.odcloud.kr/api/nts-businessman/v1/status\" />\r\n        <env name=\"REDIS_IP\" value=\"localhost\" />\r\n        <env name=\"REDIS_PASSWORD\" value=\"\" />\r\n        <env name=\"S3_BUCKET\" value=\"worqbucket\" />\r\n        <env name=\"SECRET\" value=\"uw5YoYHImqUhahQfNWU7VZpPrZ2pQx4kyN6hQkztIiJN/CMfhjnBwcVW3ccDud2e3Dq/xzeCvF4kQ2YUt5Ncpg==\" />\r\n        <env name=\"SECRET_ACCOUNT_KEY\" value=\"vBpCYu3TdmWmcBc=\" />\r\n      </envs>\r\n      <option name=\"FRAME_DEACTIVATION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <module name=\"stackUp.main\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.ssafy.stackup.StackUpApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.18034.62\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.18034.62\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"770a738c-7cff-4cbe-947d-9fe8c12c7597\" name=\"Changes\" comment=\"\" />\r\n      <created>1727052624575</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1727052624575</updated>\r\n      <workItem from=\"1727052625669\" duration=\"8309000\" />\r\n      <workItem from=\"1727061048850\" duration=\"2190000\" />\r\n      <workItem from=\"1727066590667\" duration=\"88000\" />\r\n      <workItem from=\"1727066926882\" duration=\"27000\" />\r\n      <workItem from=\"1727067516215\" duration=\"39000\" />\r\n      <workItem from=\"1727067600196\" duration=\"435000\" />\r\n      <workItem from=\"1727136174937\" duration=\"4034000\" />\r\n      <workItem from=\"1727142645872\" duration=\"20803000\" />\r\n      <workItem from=\"1727222718962\" duration=\"28693000\" />\r\n      <workItem from=\"1727309685358\" duration=\"13678000\" />\r\n      <workItem from=\"1727338437542\" duration=\"252000\" />\r\n      <workItem from=\"1727831752147\" duration=\"10000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test : pull 오류로 test\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727053044926</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727053044926</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"feat  : 프로젝트 상세 조회구현\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727060442879</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727060442879</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"feat  : 프로젝트 상세 조회구현\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727060565466</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727060565466</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"test : test\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727061196649</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727061196649</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"feat : 서명 후 프로젝트 상태변경 완료, 레디스 연결완료\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727163934847</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727163934847</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fix : 서명 후 프로젝트 업데이트 로직변경\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727164721187</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727164721187</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"hotfix : merge error 수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727166684492</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727166684492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"fix : &quot;redis 토큰 유저 id로 저장&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727227530297</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727227530297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"fix : &quot;redis 토큰 유저 id로 저장&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727227661429</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727227661429</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"feat : &quot;채팅 로그 저장 참여하고있는 모든채팅방 가져오기, 채팅방 메시지 가져오기 구현완료&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727248421446</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727248421446</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"feat : 사업자번호 진위여부 판단\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727254161684</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727254161684</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"fix :  &quot;url 에러 수정&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727254786733</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727254786733</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"fix :  error level;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727332852105</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727332852105</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"fix : merge error 수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727333036089</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727333036089</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"fix : 머지 오류수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727334272386</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727334272386</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"fix : 머지 오류수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727334571226</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727334571226</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"fix : 머지 오류수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727334735591</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727334735591</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"init : msa 기본구조\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727338537081</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727338537081</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"init : msa 기본구조\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727338625823</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727338625823</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"init : msa 기본구조\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727338634995</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727338634995</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"init : msa 기본구조\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727338657327</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727338657327</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/dev/be\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test : pull 오류로 test\" />\r\n    <MESSAGE value=\"feat  : 프로젝트 상세 조회구현\" />\r\n    <MESSAGE value=\"test : test\" />\r\n    <MESSAGE value=\"feat : 서명 후 프로젝트 상태변경 완료, 레디스 연결완료\" />\r\n    <MESSAGE value=\"fix : 서명 후 프로젝트 업데이트 로직변경\" />\r\n    <MESSAGE value=\"hotfix : merge error 수정\" />\r\n    <MESSAGE value=\"fix : &quot;redis 토큰 유저 id로 저장&quot;\" />\r\n    <MESSAGE value=\"feat : &quot;채팅 로그 저장 참여하고있는 모든채팅방 가져오기, 채팅방 메시지 가져오기 구현완료&quot;\" />\r\n    <MESSAGE value=\"feat : 사업자번호 진위여부 판단\" />\r\n    <MESSAGE value=\"fix :  &quot;url 에러 수정&quot;\" />\r\n    <MESSAGE value=\"fix :  error level;\" />\r\n    <MESSAGE value=\"fix : merge error 수정\" />\r\n    <MESSAGE value=\"fix : 머지 오류수정\" />\r\n    <MESSAGE value=\"init : msa 기본구조\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"init : msa 기본구조\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/ssafy/stackup/common/jwt/AuthenticationFilter.java</url>\r\n          <line>42</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -174,7 +174,6 @@
       <workItem from="1727222718962" duration="28693000" />
       <workItem from="1727309685358" duration="13678000" />
       <workItem from="1727338437542" duration="252000" />
-      <workItem from="1727831752147" duration="10000" />
     </task>
     <task id="LOCAL-00001" summary="test : pull 오류로 test">
       <option name="closed" value="true" />
Index: user/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ssafy.stackup.common.config;\r\n\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.client.ClientConfiguration;\r\nimport org.springframework.data.elasticsearch.client.elc.ElasticsearchConfiguration;\r\nimport org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;\r\n\r\n@Configuration\r\n@EnableElasticsearchRepositories(basePackages = \"com.ssafy.stackup.domain.recommend.repository\")\r\npublic class ElasticSearchConfig extends ElasticsearchConfiguration {\r\n    @Override\r\n    public ClientConfiguration clientConfiguration() {\r\n        return ClientConfiguration.builder()\r\n                .connectedTo(\"localhost:9200\")\r\n                .build();\r\n    }\r\n}\r\n
===================================================================
diff --git a/user/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java b/user/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java
--- a/user/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java	
+++ b/user/src/main/java/com/ssafy/stackup/common/config/ElasticSearchConfig.java	
@@ -11,7 +11,7 @@
     @Override
     public ClientConfiguration clientConfiguration() {
         return ClientConfiguration.builder()
-                .connectedTo("localhost:9200")
+                .connectedTo("34.47.84.173:9200")
                 .build();
     }
 }
